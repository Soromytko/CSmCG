{"mappings":"AAAA,IAAI;AAEJ,MAAM;IACF,YAAY,MAAM,CAAE;QAChB,IAAI,CAAC,QAAQ;YACT,QAAQ,CAAC;YACT,QAAQ,CAAC;YACT,QAAQ,CAAC;YACT,MAAM,CAAC;YACP,UAAU,CAAC;YACX,aAAa,CAAC;QAClB;QAEA,IAAI,CAAC,UAAU;IACnB;IAEA,IAAI,SAAS;QACT,OAAO,IAAI,CAAC;IAChB;IAEA,IAAI,OAAO,MAAM,EAAE;QACf,IAAI,CAAC,OAAO,SACR,QAAQ,KAAK,WAAW,QAAQ;QAEpC,IAAI,CAAC,UAAU;IACnB;IAEA,QAAQ;QACJ,IAAI,CAAC,QAAQ;QAEb,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,QAAQ,IAAI,CAAC,MAAM,QAAS;YAC1D,MAAM,WAAW,IAAI,CAAC,QAAQ,mBAAmB;YACjD,IAAI,CAAC,QAAQ,UAAU,KAAK;QAChC;QACA,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,QAAQ,IAAI,CAAC,MAAM,QACjD,IAAI,CAAC,QAAQ,UAAU,KAAK,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE;QAElD,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,QAAQ,IAAI,CAAC,MAAM,QACjD,IAAI,CAAC,QAAQ,UAAU,KAAK,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE;QAE5D,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,QAAQ,IAAI,CAAC,MAAM,MACjD,IAAI,CAAC,QAAQ,QAAQ,KAAK;QAE9B,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,QAAQ,IAAI,CAAC,MAAM,UAAW;YAC5D,OAAO;YACP,wDAAwD;YACxD,IAAI,CAAC,QAAQ,QAAQ,KAAK,MAAM;YAChC,MAAM;QACV;QACA,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,QAAQ,IAAI,CAAC,MAAM,aAAc;YAC/D,IAAI,CAAC,QAAQ,UAAU,MAAM,aAAa,MAAM,QAAQ,CAAC,EAAE,EAAE,MAAM,QAAQ,CAAC,EAAE,EAAE,MAAM,QAAQ,CAAC,EAAE;YACjG,IAAI,CAAC,QAAQ,UAAU,MAAM,cAAc,MAAM,SAAS,CAAC,EAAE,EAAE,MAAM,SAAS,CAAC,EAAE,EAAE,MAAM,SAAS,CAAC,EAAE;YACrG,IAAI,CAAC,QAAQ,UAAU,MAAM,UAAU,MAAM,KAAK,CAAC,EAAE,EAAE,MAAM,KAAK,CAAC,EAAE,EAAE,MAAM,KAAK,CAAC,EAAE;YACrF,IAAI,CAAC,QAAQ,UAAU,MAAM,SAAS,MAAM;YAC5C,IAAI,CAAC,QAAQ,QAAQ,MAAM,SAAS,MAAM;QAC9C;IACJ;IAEA,UAAU,IAAI,EAAE,KAAK,EAAE;QACnB,IAAI,CAAC,MAAM,MAAM,CAAC,KAAK,GAAG;IAC9B;IAEA,UAAU,IAAI,EAAE,KAAK,EAAE;QACnB,IAAI,CAAC,MAAM,MAAM,CAAC,KAAK,GAAG;IAC9B;IAEA,QAAQ,IAAI,EAAE,KAAK,EAAE;QACjB,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,GAAG;IAC5B;IAEA,WAAW,IAAI,EAAE,KAAK,EAAE;QACpB,IAAI,CAAC,MAAM,QAAQ,CAAC,KAAK,GAAG;IAChC;IAEA,aAAa,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE;QACvD,IAAI,CAAC,MAAM,WAAW,CAAC,KAAK,GAAG;YAC3B,UAAU;YACV,WAAW;YACX,OAAO;YACP,MAAM;YACN,MAAM;QACV;IACJ;AAEJ","sources":["src/LabaCore/src/Engine/Material.js"],"sourcesContent":["var LIGHT_POSITION\r\n\r\nclass Material {\r\n    constructor(shader) {\r\n        this._data = {\r\n            float1: {},\r\n            float2: {},\r\n            float3: {},\r\n            mat4: {},\r\n            textures: {},\r\n            pointLights: {},\r\n        }\r\n        \r\n        this._shader = shader\r\n    }\r\n\r\n    get shader() {\r\n        return this._shader\r\n    }\r\n\r\n    set shader(shader) {\r\n        if (!shader.isBuilt) {\r\n            console.warn(\"Shader \", shader, \" not built\")\r\n        }\r\n        this._shader = shader\r\n    }\r\n\r\n    apply() {\r\n        this._shader.bind()\r\n\r\n        for (const [key, value] of Object.entries(this._data.float1)) {\r\n            const location = this._shader.getUniformLocation(key)\r\n            this._shader.setFloat1(key, value)\r\n        }\r\n        for (const [key, value] of Object.entries(this._data.float2)) {\r\n            this._shader.setFloat2(key, value[0], value[1])\r\n        }\r\n        for (const [key, value] of Object.entries(this._data.float3)) {\r\n            this._shader.setFloat3(key, value[0], value[1], value[2])\r\n        }\r\n        for (const [key, value] of Object.entries(this._data.mat4)) {\r\n            this._shader.setMat4(key, value)\r\n        }\r\n        for (const [key, value] of Object.entries(this._data.textures)) {\r\n            // TODO\r\n            // const location = this._shader.getUniformLocation(key)\r\n            this._shader.setInt1(key, value._counter)\r\n            value.bind()\r\n        }\r\n        for (const [key, value] of Object.entries(this._data.pointLights)) {\r\n            this._shader.setFloat3(key + \".position\", value.position[0], value.position[1], value.position[2])\r\n            this._shader.setFloat3(key + \".direction\", value.direction[0], value.direction[1], value.direction[2])\r\n            this._shader.setFloat3(key + \".color\", value.color[0], value.color[1], value.color[2])\r\n            this._shader.setFloat1(key + \".size\", value.size)\r\n            this._shader.setInt1(key + \".type\", value.type)\r\n        }\r\n    }\r\n\r\n    setFloat1(name, value) {\r\n        this._data.float1[name] = value\r\n    }\r\n\r\n    setFloat3(name, value) {\r\n        this._data.float3[name] = value\r\n    }\r\n\r\n    setMat4(name, value) {\r\n        this._data.mat4[name] = value\r\n    }\r\n\r\n    setTexture(name, value) {\r\n        this._data.textures[name] = value\r\n    }\r\n\r\n    setLightInfo(name, position, direction, color, size, type) {\r\n        this._data.pointLights[name] = {\r\n            position: position,\r\n            direction: direction,\r\n            color: color,\r\n            size: size,\r\n            type: type,\r\n        }\r\n    }\r\n\r\n}\r\n"],"names":[],"version":3,"file":"index.2ce2039a.js.map","sourceRoot":"/__parcel_source_root/"}
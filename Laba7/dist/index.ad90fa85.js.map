{"mappings":"AAAA,SAAS,OAAO,MAAM;IAClB,OAAO,KAAK,KAAK,OAAO,IAAI,OAAO,IAAI,OAAO,IAAI,OAAO,IAAI,OAAO,IAAI,OAAO;AACnF;AAEA,SAAS,UAAU,MAAM;IACrB,MAAM,IAAI,OAAO;IACjB,OAAO,KAAK,IAAI;QAAC,GAAG;QAAG,GAAG;QAAG,GAAG;IAAC,IAAI;QAAC,GAAG,OAAO,IAAI;QAAG,GAAG,OAAO,IAAI;QAAG,GAAG,OAAO,IAAI;IAAC;AAC3F;AAEA,SAAS,KAAK,IAAI,EAAE,EAAE,EAAE,KAAK;IACzB,MAAM,QAAQ;QACV,GAAG,GAAG,IAAI,KAAK;QACf,GAAG,GAAG,IAAI,KAAK;QACf,GAAG,GAAG,IAAI,KAAK;IACnB;IAEA,MAAM,IAAI,OAAO;IACjB,IAAG,KAAK,GACJ,OAAO;IAGX,MAAM,YAAY,UAAU;IAC5B,MAAM,IAAI,KAAK,IAAI,UAAU,IAAI,QAAQ;IACzC,MAAM,IAAI,KAAK,IAAI,UAAU,IAAI,QAAQ;IACzC,MAAM,IAAI,KAAK,IAAI,UAAU,IAAI,QAAQ;IACzC,OAAO;QAAC,GAAG;QAAG,GAAG;QAAG,GAAG;IAAC;AAC5B;AAEA,SAAS,gBAET;AAEA,MAAM;IACF,YAAY,MAAM,CAAE;QAChB,IAAI,CAAC,UAAU;QAEf,IAAI,CAAC,OAAO;YAAC,GAAG;YAAK,GAAG;QAAG;IAC/B;IAEA,SAAS;QACL,MAAM,IAAI,MAAM,OAAO,OAAO,KAAO,MAAM,OAAO,OAAO,MAAM;QAC/D,MAAM,QAAQ;YACV,GAAG,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK;YAC3B,GAAG;YACH,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK;QAChC;QAEA,MAAM,IAAI,MAAM,OAAO,OAAO,KAAO,MAAM,OAAO,OAAO,MAAM;QAC/D,MAAM,UAAU;YACZ,GAAG,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK;YACnD,GAAG,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK;YAC3B,GAAG,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK;QACvD;QAEA,IAAI,YAAY;YACZ,GAAG,MAAM,IAAI,QAAQ;YACrB,GAAG,MAAM,IAAI,QAAQ;YACrB,GAAG,MAAM,IAAI,QAAQ;QACzB;QAEA,YAAY,UAAU;QAEtB,MAAM,IAAI,UAAU,IAAI;QACxB,MAAM,IAAI,CAAC,UAAU,IAAI;QACzB,MAAM,IAAI,CAAC,UAAU,IAAI;QAGzB,IAAI,CAAC,QAAQ,WAAW,GAAG,GAAG;QAC9B,IAAI,CAAC,QAAQ,WAAW;YAAC,CAAC,IAAI,CAAC,KAAK;YAAG,CAAC,IAAI,CAAC,KAAK;YAAG;SAAE;QAEvD,IAAI,MAAM,MAAM,cACZ,IAAI,CAAC;IAEb;IAEA,WAAW;QACP,IAAI,CAAC,KAAK,KAAK,MAAM,MAAM,MAAM,IAAI;QACrC,IAAI,CAAC,KAAK,KAAK,MAAM,MAAM,MAAM,IAAI;IACzC;AACJ","sources":["src/CameraController.js"],"sourcesContent":["function length(vector) {\n    return Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z)\n}\n\nfunction normalize(vector) {\n    const l = length(vector)\n    return l == 0 ? {x: 0, y: 0, z: 0} : {x: vector.x / l, y: vector.y / l, z: vector.z / l}\n}\n\nfunction move(from, to, speed) {\n    const delta = {\n        x: to.x - from.x,\n        y: to.y - from.y,\n        z: to.z - from.z,\n    }\n    \n    const l = length(delta)\n    if(l == 0) {\n        return from\n    }\n    \n    const direction = normalize(delta)\n    const x = from.x + direction.x * speed * l\n    const y = from.y + direction.y * speed * l\n    const z = from.z + direction.z * speed * l\n    return {x: x, y: y, z: z}\n}\n\nfunction cameraScript() {\n    \n}\n\nclass CameraController {\n    constructor(object) {\n        this._object = object\n\n        this._rot = {x: 0.0, y: 0.0}\n    }\n\n    update() {\n        const h = input.getKey(\"A\") ? -1.0 : input.getKey(\"D\") ? 1.0 : 0.0\n        const right = {\n            x: Math.cos(this._rot.x) * h,\n            y: 0.0,\n            z: -Math.sin(this._rot.x) * h,\n        }\n    \n        const v = input.getKey(\"S\") ? -1.0 : input.getKey(\"W\") ? 1.0 : 0.0\n        const forward = {\n            x: Math.sin(this._rot.x) * Math.cos(this._rot.y) * v,\n            y: Math.sin(this._rot.y) * v,\n            z: Math.cos(this._rot.x) * Math.cos(this._rot.y) * v,\n        }\n    \n        let direction = {\n            x: right.x + forward.x,\n            y: right.y + forward.y,\n            z: right.z + forward.z,\n        }\n    \n        direction = normalize(direction)\n\n        const x = direction.x * 0.05\n        const y = -direction.y * 0.05\n        const z = -direction.z * 0.05\n\n        \n        this._object.moveGlobal(x, y, z)\n        this._object.rotation = [-this._rot.y, -this._rot.x, 0]\n      \n        if (input.mouse.isHoldButton) {\n            this._looking()\n        }\n    }\n\n    _looking() {\n        this._rot.x += input.mouse.delta.x * 0.01\n        this._rot.y += input.mouse.delta.y * 0.01\n    }\n}"],"names":[],"version":3,"file":"index.ad90fa85.js.map","sourceRoot":"/__parcel_source_root/"}
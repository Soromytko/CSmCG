{"mappings":"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","sources":["src/index.js"],"sourcesContent":["const input = new Input()\nconst OBJ_LOADER = new OBJLoader()\n\nconst SHADERS = {\n    standard: undefined,\n}\n\nconst PROJECT_MATRIX = glMatrix.mat4.create()\nconst VIEW_MATRIX = glMatrix.mat4.create()\n\nlet cameraPivot\nlet camera\n\nlet lightSize = 7\nlet ambientIntensity = 0.1\nlet diffuseIntensity = 2\nlet specularIntensity = 0.5\nlet mixingTextures = 1.0\n\nlet scene\nlet pedestal\nlet redCube\nlet greenCube\nlet blueCube\nlet plane\n\nlet headlightL\nlet headlightR\n\nconst objects = []\n\nasync function loadShaders() {\n    SHADERS.standard = new Shader(standardVert, standardFrag)\n}\n\nfunction buildShaders() {\n    for (const shader in SHADERS) {\n        if (!SHADERS[shader].build()) {\n            console.log(shader, \" shader error\")\n            return false\n        }\n    }\n\n    return true\n}\n\nfunction createCube(pos, scale, color, primaryImage) {\n    const rot = [0, 0, 0]\n\n    const primaryTexture = new Texture(primaryImage)\n    \n    const material = new Material(SHADERS.standard)\n    material.setFloat3(\"u_Color\", color)\n    material.setTexture(\"u_MainTexture\", primaryTexture)\n    \n    const cube = new GameObject(pos, rot, scale)\n    cube.meshRenderer = new MeshRenderer(new CubeMesh(), material)\n\n    return cube\n}\n\nfunction createLampCube(pos, scale) {\n    const rot = [0, 0, 0]\n    \n    const material = new Material(SHADERS.standard)\n    material.setFloat3(\"u_Color\", [1.0, 1.0, 1.0])\n    \n    const cube = new GameObject(pos, rot, scale)\n    cube.meshRenderer = new MeshRenderer(new CubeMesh(), material)\n\n    return cube\n}\n\nfunction createPlane(pos, scale, color) {\n    const rot = [0, 0, 0]\n\n    const texture1 = new Texture(document.getElementById('ground-image'))\n    \n    const material = new Material(SHADERS.standard)\n    material.setFloat3(\"u_Color\", color)\n    material.setTexture(\"u_MainTexture\", texture1)\n    \n    const plane = new GameObject(pos, rot, scale)\n    plane.meshRenderer = new MeshRenderer(new PlaneMesh(), material)\n\n    return plane\n}\n\nfunction createCar(pos) {\n    const material = new Material(SHADERS.standard)\n    material.setFloat3(\"u_Color\", [1.0, 1.0, 1.0])\n    \n    const model = new GameObject(pos)\n    const mesh = new Mesh()\n    mesh.vertices = OBJ_LOADER.vertices\n    mesh.normals = OBJ_LOADER.normals\n    mesh.indices = OBJ_LOADER.indices\n    mesh.uv = new Array(mesh.vertices.length)\n    mesh.build()\n    model.meshRenderer = new MeshRenderer(mesh, material)\n    \n    const collider = new BoxCollider()\n    collider.parent = model\n    collider.scale = [5.0, 5.0, 3.0]\n    model.collider = collider\n\n    // cube = createCube([0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [1.0, 0.0, 1.0], document.getElementById(\"cube1-image\"))\n    // cube.parent = model\n    // cube.localPosition = [0.0, 0.0, 0.0]\n    // cube.scale = [5.0, 5.0, 3.0]\n\n    return model\n}\n\nfunction createScene() {\n    //Textures\n    const one = document.getElementById(\"cube1-image\")\n    const two = document.getElementById(\"cube2-image\")\n    const three = document.getElementById(\"cube3-image\")\n    const fire = document.getElementById(\"fire-image\")\n    const grass = document.getElementById(\"grass-image\")\n    const marble = document.getElementById(\"marble-image\")\n\n    // Create objects\n    scene = new GameObject([0.0, 0.0, 0.0])\n    pedestal = new GameObject([0.0, 0.0, -2.0])\n    redCube = createCube([0.0, 0.0, -2.0], [1.0, 1.0, 1.0], [1.0, 0.0, 0.0], one)\n    greenCube = createCube([-1.0, -0.1, -2.0], [1.0, 0.8, 1.0], [0.0, 1.0, 0.0], two)\n    blueCube = createCube([1.0, -0.2, -2.0], [1.0, 0.6, 1.0], [0.0, 0.0, 1.0], three)\n    lightCube = createLampCube([0.0, 2.0, -2.0], [0.1, 0.1, 0.1])\n    lightCube.meshRenderer.material = new Material(SHADERS.lamp)\n    \n    pedestal.parent = scene\n    redCube.parent = pedestal\n    greenCube.parent = pedestal\n    blueCube.parent = pedestal\n\n    plane = createPlane([0.0, -0.5, 0.0], [100, 1, 100], [1.0, 1.0, 1.0])\n    plane.parent = scene\n\n    car = createCar([0.0, 0.0, -10.0])\n    car.parent = scene\n    car.script = new CarController(car)\n\n    headlightL = new GameObject([2.52965, 0.365211, -0.746565])\n    // headlightL = createLampCube([2.52965, 0.365211, -0.746565], [0.1, 0.1, 0.1])\n    headlightL.parent = car\n    headlightL.localPosition = [2.52965, 0.365211, -0.746565]\n    headlightR = new GameObject()\n    headlightR.parent = car\n    headlightR.localPosition = [2.52965, 0.365211, +0.746565]\n\n    //Camera\n    cameraPivot = new GameObject([0.0, 0.0, 0.0])\n    cameraPivot.parent = car\n    cameraPivot.localPosition = [0.0, 0.0, 0.0]\n    camera = new GameObject([0.0, 3.0, 2.0])\n    camera.parent = cameraPivot\n    camera.localPosition = [0.0, 0.0, 10.0]\n    camera.script = new CameraPivotController(camera)\n    \n    // Push only a root objects, child objects will be rendered recursively\n    objects.push(scene)\n    objects.push(lightCube)\n\n\n}\n\nasync function loadModels() {\n    await OBJ_LOADER.load(\"res/Models/Car.obj\")\n}\n\nasync function main() {\n    await loadShaders()\n    await loadModels()\n    buildShaders()\n    createScene()\n    bindGUI()\n\n    const renderer = new Renderer(0, 0, gl.canvas.width, gl.canvas.height)\n    renderer.cleaningColor = [0.0, 0.0, 0.0, 1.0]\n\n    const renderObjectRecursively = function(object) {\n        const meshRenderer = object.meshRenderer\n        if (meshRenderer) {\n            const material = meshRenderer.material\n            material.setMat4(\"u_ProjectMat\", PROJECT_MATRIX)\n            material.setMat4(\"u_ViewMat\", VIEW_MATRIX)\n            material.setMat4(\"u_WorldMat\", object.matrix)\n            //Light\n            material.setFloat3(\"u_CameraPosition\", camera.globalPosition)\n            material.setLightInfo(\"u_LightInfos[0]\", lightCube.globalPosition, [0, 0, 0], [1.0, 1.0, 1.0], lightSize, 0)\n            material.setLightInfo(\"u_LightInfos[1]\", headlightL.globalPosition, headlightL.getRelativeDirection(1.0, -1.0, 0.0), [1.0, 1.0, 1.0], lightSize, 1)\n            material.setLightInfo(\"u_LightInfos[2]\", headlightR.globalPosition, headlightR.getRelativeDirection(1.0, -1.0, 0.0), [1.0, 1.0, 1.0], lightSize, 1)\n            material.setFloat1(\"u_LightSize\", lightSize)\n            material.setFloat1(\"u_AmbientIntensity\", ambientIntensity)\n            material.setFloat1(\"u_DiffuseIntensity\", diffuseIntensity)\n            material.setFloat1(\"u_SpecularIntensity\", specularIntensity)\n            //Texture\n            material.setFloat1(\"u_MixingTextures\", mixingTextures)\n\n            if (!meshRenderer.material.shader) return\n            renderer.submit(meshRenderer.material.shader, meshRenderer.mesh.vertexArray)\n            meshRenderer.material.apply()\n            renderer.render()\n        }\n\n        object._children.forEach(child => {\n            renderObjectRecursively(child)\n        })\n    }\n\n    renderLoop()\n    function renderLoop() {\n        input.update()\n        camera._script.update()\n        car._script.update()\n\n        glMatrix.mat4.perspective(PROJECT_MATRIX, (60 * Math.PI) / 180, gl.canvas.clientWidth / gl.canvas.clientHeight, 0.1, 100.0)\n        glMatrix.mat4.invert(VIEW_MATRIX, camera.matrix)\n\n        renderer.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\n        objects.forEach(object => {\n            renderObjectRecursively(object)\n        })\n\n        requestAnimationFrame(renderLoop)\n    }\n}\n"],"names":[],"version":3,"file":"index.579125c3.js.map","sourceRoot":"/__parcel_source_root/"}
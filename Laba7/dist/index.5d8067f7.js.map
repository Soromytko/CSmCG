{"mappings":"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","sources":["src/LabaCore/src/Engine/GameObject.js"],"sourcesContent":["class GameObject {\r\n    constructor(position = [0, 0, 0], rotation = [0, 0, 0], scale = [1, 1, 1]) {\r\n        this._globalPosition = glMatrix.vec3.create()\r\n        glMatrix.vec3.copy(this._globalPosition, position)\r\n        this._localPosition = glMatrix.vec3.create()\r\n        glMatrix.vec3.copy(this._localPosition, position)\r\n        this._rotation = glMatrix.vec3.create()\r\n        glMatrix.vec3.copy(this._rotation, rotation)\r\n        this._scale = scale\r\n        this._matrix = glMatrix.mat4.create()\r\n        this._updateMatrix()\r\n\r\n        this._parent\r\n        this._children = []\r\n        this._hierarchyIndex = 0\r\n\r\n        // Components\r\n        this._meshRenderer\r\n        this._collider\r\n        this._script\r\n    }\r\n    \r\n    get globalPosition() {\r\n        return this._globalPosition\r\n    }\r\n\r\n    set globalPosition(value) {\r\n        this._globalPosition = glMatrix.vec3.create()\r\n        glMatrix.vec3.copy(this._globalPosition, value)\r\n\r\n        // this._localPosition = this._parent ? value - this._parent._globalPosition : this._globalPosition\r\n        if (this._parent) {\r\n            // DOTO\r\n            glMatrix.vec3.sub(this._localPosition, value, this._parent._globalPosition)\r\n            // this._globalPosition = glMatrix.vec3.create()\r\n            // glMatrix.mat4.getTranslation(this._globalPosition, this._matrix)\r\n        } else {\r\n            glMatrix.vec3.copy(this._localPosition, this._globalPosition)\r\n        }\r\n\r\n        this._updateMatrix()\r\n        this._updateChildrenRecursive()\r\n    }\r\n\r\n    get localPosition() {\r\n        return this._localPosition\r\n    }\r\n\r\n    set localPosition(value) {\r\n        this._localPosition = glMatrix.vec3.create()\r\n        glMatrix.vec3.copy(this._localPosition, value)\r\n\r\n        this._updateMatrix()\r\n        \r\n        if (this._parent) {\r\n            this._globalPosition = glMatrix.vec3.create()\r\n            glMatrix.mat4.getTranslation(this._globalPosition, this._matrix)\r\n        } else {\r\n            glMatrix.vec3.copy(this._globalPosition, this._localPosition)\r\n        }\r\n\r\n        this._updateChildrenRecursive()\r\n    }\r\n\r\n    get rotation() {\r\n        return this._rotation\r\n    }\r\n\r\n    set rotation(value) {\r\n        this._rotation = glMatrix.vec3.create()\r\n        glMatrix.vec3.copy(this._rotation, value)\r\n        \r\n        // TODO\r\n        this._updateMatrix()\r\n        this._updateChildrenRecursive()\r\n        // this.localPosition = this._localPosition\r\n    }\r\n\r\n    get scale() {\r\n        return this._scale\r\n    }\r\n\r\n    get collider() {\r\n        return this._collider\r\n    }\r\n\r\n    set collider(value) {\r\n        this._collider = value\r\n    }\r\n\r\n    set scale(value) {\r\n        this._scale = value\r\n    }\r\n\r\n    get matrix() {\r\n        return this._matrix\r\n    }\r\n\r\n    set matrix(newMatrix) {\r\n        this._matrix = newMatrix\r\n    }\r\n\r\n    get meshRenderer() {\r\n        return this._meshRenderer\r\n    }\r\n\r\n    set meshRenderer(value) {\r\n        this._meshRenderer = value\r\n    }\r\n\r\n    get parent() {\r\n        return this._parent\r\n    }\r\n\r\n    set parent(newParent) {\r\n        if (newParent) {\r\n            if (newParent == this) {\r\n                console.log(\"The new parent object is the same object\")\r\n                return\r\n            }\r\n\r\n            if (this._isChildRecursive(newParent)) {\r\n                console.log(\"The new parent object is a child of this object\")\r\n                return\r\n            }\r\n            newParent._addChild(this)\r\n        }\r\n\r\n        if (this._parent) {\r\n            this._parent._removeChild(this)\r\n        }\r\n        \r\n        this._parent = newParent\r\n\r\n        glMatrix.vec3.sub(this._localPosition, this._globalPosition, this._parent._globalPosition)\r\n        this.localPosition = this._localPosition\r\n    }\r\n\r\n    get right() {\r\n        return this.getRelativeDirection(1.0, 0.0, 0.0)\r\n    }\r\n\r\n    get forward() {\r\n        return this.getRelativeDirection(0.0, 0.0, 1.0)\r\n    }\r\n\r\n    get script() {\r\n        return this._script\r\n    }\r\n\r\n    set script(value) {\r\n        this._script = value\r\n    }\r\n\r\n    getRelativeDirection(x, y, z) {\r\n        const destMat = glMatrix.mat4.create()\r\n        glMatrix.mat4.translate(destMat, this._matrix, [x, y, z])\r\n        \r\n        const dest = glMatrix.vec3.create()\r\n        glMatrix.mat4.getTranslation(dest, destMat)\r\n        \r\n        const result = glMatrix.vec3.create()\r\n        glMatrix.vec3.sub(result, dest, this._globalPosition)\r\n\r\n        return result\r\n    }\r\n\r\n    moveGlobal(x, y, z) {\r\n        const offset = glMatrix.vec3.create()\r\n        glMatrix.vec3.set(offset, x, y, z)\r\n        const newPos = glMatrix.vec3.create()\r\n        glMatrix.vec3.add(newPos, this._globalPosition, offset)\r\n        this.globalPosition = newPos\r\n    }\r\n\r\n    moveLocal(x, y, z) {\r\n        const offset = glMatrix.vec3.create()\r\n        glMatrix.vec3.set(offset, x, y, z)\r\n        const newPos = glMatrix.vec3.create()\r\n        glMatrix.vec3.add(newPos, this._localPosition, offset)\r\n        this.localPosition = newPos\r\n    }\r\n\r\n    rotate(x, y, z) {\r\n        const offset = glMatrix.vec3.create()\r\n        glMatrix.vec3.set(offset, x, y, z)\r\n        glMatrix.vec3.add(this._rotation, this._rotation, offset)\r\n        this.rotation = this._rotation\r\n    }\r\n\r\n    _addChild(newChild) {\r\n        if (!newChild) {\r\n            console.log(\"The new child object is undefined\")\r\n            return\r\n        }\r\n\r\n        // if (newChild._parent) {\r\n        //     console.log(\"The parent of the new child is not null\")\r\n        // }\r\n\r\n        // if (newChild == this) {\r\n        //     console.log(\"The new child and the parent are the same object\")\r\n        //     return\r\n        // }\r\n\r\n        const index = this._children.indexOf(newChild)\r\n        if (index < 0) {\r\n            this._children.push(newChild)\r\n        }\r\n        \r\n    }\r\n\r\n    _removeChild(maybeChild) {\r\n        if (!maybeChild) {\r\n            console.log(\"The child object is undefined\")\r\n            return\r\n        }\r\n\r\n        const index = this._children.indexOf(maybeChild)\r\n        if (index >= 0) {\r\n            this._children.splice(index, 1)\r\n            // maybeChild._parent = undefined\r\n        }\r\n    }\r\n\r\n    _isChildRecursive(maybeChild) {\r\n        if (this._children.indexOf(maybeChild) >= 0) {\r\n            return true;\r\n        }\r\n\r\n        for (let i = 0; i < this._children.length; i++) {\r\n            return this._children[i]._isChildRecursive(maybeChild)\r\n        }\r\n    }\r\n\r\n    _updateMatrix() {\r\n        const maybeParentMatrix = this._parent ? this._parent.matrix : glMatrix.mat4.create()\r\n\r\n        const pos = this._localPosition\r\n        glMatrix.mat4.translate(this._matrix, maybeParentMatrix, pos)\r\n\r\n        const rot = this._rotation\r\n        glMatrix.mat4.rotate(this._matrix, this._matrix, rot[1], [0, 1, 0])\r\n        glMatrix.mat4.rotate(this._matrix, this._matrix, rot[0], [1, 0, 0])\r\n\r\n        const scale = this._scale\r\n        glMatrix.mat4.scale(this._matrix, this._matrix, scale)\r\n    }\r\n\r\n    _updateChildrenRecursive() {\r\n        this._children.forEach(child => {\r\n            // It updates child.globalPosition and child.matrix\r\n            child.localPosition = child._localPosition\r\n            // child.setLocalPosition(this._localPosition)\r\n            // child.localRotation = child._localRotation\r\n        })\r\n    }\r\n\r\n    // _getPositionByMatrix() {\r\n    //     const vec3 = glMatrix.vec3.create()\r\n    //     const matrix = this._matrix\r\n    //     glMatrix.mat4.getTranslation(vec3, matrix)\r\n    //     return {x: vec3[0], y: vec3[1], z: vec3[2]}\r\n    // }\r\n\r\n    // _calGlobalPos() {\r\n    //     const m = this._parent\r\n    //     const v = [1, 1, 1, 1]\r\n    //     const u = [0, 0, 0, 0]\r\n    //     u[0] = m[0] * v[0] + m[4] * v[1] + m[8]  * v[2] + m[12] * v[3]\r\n    //     u[1] = m[1] * v[0] + m[5] * v[1] + m[9]  * v[2] + m[13] * v[3]\r\n    //     u[2] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14] * v[3]\r\n    //     u[3] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15] * v[3]\r\n    //     return u\r\n    // }\r\n\r\n}\r\n\r\n\r\n"],"names":[],"version":3,"file":"index.5d8067f7.js.map","sourceRoot":"/__parcel_source_root/"}
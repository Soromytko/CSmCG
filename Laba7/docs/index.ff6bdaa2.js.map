{"mappings":"AAAA,MAAM,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BtB,CAAC;AAED,MAAM,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqGtB,CAAC","sources":["src/shaders.js"],"sourcesContent":["const standardVert = `\n\nprecision mediump float;\n\nattribute vec3 a_VertexPosition;\nattribute vec3 a_VertexNormal;\nattribute vec2 a_uvTexture;\n\nuniform mat4 u_ProjectMat;\nuniform mat4 u_ViewMat;\nuniform mat4 u_WorldMat;\n\nvarying vec3 v_VertexPosition;\nvarying vec3 v_VertexNormal;\nvarying vec2 v_uvTexture;\n\nvoid main()\n{\n    vec4 vertexGlobalPosition = u_WorldMat * vec4(a_VertexPosition, 1.0);\n    v_VertexPosition = vertexGlobalPosition.xyz;\n    vec3 rotatedNormal = (u_WorldMat * vec4(a_VertexNormal, 1.0)).xyz - (u_WorldMat * vec4(0.0, 0.0, 0.0, 1.0)).xyz;\n    v_VertexNormal = rotatedNormal;\n    v_uvTexture = a_uvTexture;\n\n    gl_Position = u_ProjectMat * u_ViewMat * u_WorldMat * vec4(a_VertexPosition, 1.0);\n}\n\n\n`\n\nconst standardFrag = `\nprecision mediump float;\n\nstruct LightInfo {\n    vec3 position;\n    vec3 direction;\n    vec3 color;\n    float size;\n    int type;\n};\n\n#define LIGHT_COUNT 3\n\nvarying vec3 v_VertexPosition;\nvarying vec3 v_VertexNormal;\nvarying vec2 v_uvTexture;\n\nuniform vec3 u_Color;\nuniform float u_AmbientIntensity;\nuniform float u_DiffuseIntensity;\nuniform float u_SpecularIntensity;\n\n// Texture\nuniform sampler2D u_MainTexture;\nuniform float u_MixingTextures;\n\n//uniform vec3 u_LightPosition;\nuniform vec3 u_LightPositions[5];\nuniform float u_LightSize;\nuniform vec3 u_CameraPosition;\n\nuniform LightInfo u_LightInfos[5];\n\nvec4 getAmbientLightFragColor(vec3 color) {\n    return vec4(color * u_AmbientIntensity, 1.0);\n}\n\nvec4 getPointLightFragColor(LightInfo lightInfo) {\n    // Diffuse Color\n    vec3 directionToLight = lightInfo.position - v_VertexPosition;\n    float distanceToLight = length(directionToLight);\n    directionToLight = normalize(directionToLight);\n    vec3 normal = normalize(v_VertexNormal);\n    float diffuse = max(0.0, dot(directionToLight, normal));\n    float attenuation = max(0.0, (1.0 - distanceToLight / lightInfo.size)); // Light attenuation\n    diffuse *= attenuation;\n    vec3 diffuseColor = lightInfo.color * (diffuse * u_DiffuseIntensity);\n\n    //Specular\n    vec3 directionToCamera = u_CameraPosition - v_VertexPosition;\n    directionToCamera = normalize(directionToCamera);\n    vec3 lightDirection = v_VertexPosition - lightInfo.position;\n    lightDirection = normalize(lightDirection);\n    vec3 reflectedLightDirection = reflect(lightDirection, normal);\n    float specular = max(0.0, dot(directionToCamera, reflectedLightDirection));\n    specular = pow(specular, 128.0);\n    vec3 specularColor = lightInfo.color * (specular * u_SpecularIntensity);\n\n    return vec4(diffuseColor + specularColor, 1.0);\n}\n\nvec4 getSpotLightFragColor(LightInfo lightInfo) {\n    vec3 directionToLight = lightInfo.position - v_VertexPosition;\n    float distanceToLight = length(directionToLight);\n    directionToLight = normalize(directionToLight);\n    float diffuse = max(0.0, dot(directionToLight, - lightInfo.direction));\n    diffuse = (diffuse < 0.9) ? 0.0 : 1.0 / pow(distanceToLight, 1.7);\n    vec3 diffuseColor = lightInfo.color * (diffuse);\n\n    return vec4(diffuseColor, 1.0);\n}\n\nvec4 getTextureFragColor(sampler2D texture, vec2 uv) {\n    vec2 flipUV = vec2(uv.x, 1.0 - uv.y);\n    return texture2D(texture, flipUV);\n}\n\nvec4 getGeneralLightFragColor() {\n    vec4 result = getAmbientLightFragColor(vec3(1.0, 1.0, 1.0));\n    for (int i = 0; i < LIGHT_COUNT; i++) {\n        int type = u_LightInfos[i].type;\n        if (type == 0) { // Point light type\n            result += getPointLightFragColor(u_LightInfos[i]);\n        } else if (type == 1) {\n            result += getSpotLightFragColor(u_LightInfos[i]);\n        }\n    }\n    return result;\n}\n\nvoid main()\n{\n    vec4 baseFragColor = vec4(u_Color.xyz, 1.0);\n    vec4 lightFragColor =  getGeneralLightFragColor();\n    vec4 textureFragColor = getTextureFragColor(u_MainTexture, v_uvTexture);\n    \n    gl_FragColor = baseFragColor * lightFragColor * textureFragColor; \n}\n\n\n\n`"],"names":[],"version":3,"file":"index.ff6bdaa2.js.map","sourceRoot":"/__parcel_source_root/"}
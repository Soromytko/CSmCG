{"mappings":"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","sources":["src/LabaCore/src/Core/Shader.js"],"sourcesContent":["class Shader {\n    constructor(vertexShaderSourceCode, fragmentShaderSourceCode) {\n        this._vertexShaderSourceCode = vertexShaderSourceCode\n        this._fragmentShaderSourceCode = fragmentShaderSourceCode\n\n        this._uniforms = []\n    }\n\n    get isBuilt() {\n        return this._shaderProgram ? true : false\n    }\n\n    build() {\n        const compiledVertexShader = this._compileShader(gl.VERTEX_SHADER, this._vertexShaderSourceCode)\n        const compiledFragmentShader = this._compileShader(gl.FRAGMENT_SHADER, this._fragmentShaderSourceCode)\n\n        if (!compiledVertexShader || !compiledFragmentShader) {\n            return false\n        }\n\n        this._shaderProgram = this._linkShaders(compiledVertexShader, compiledFragmentShader)\n\n        if (this._shaderProgram) {\n            return true\n        }\n\n        return false\n    }\n\n    getAttributeLocation(name) {\n        return gl.getAttribLocation(this._shaderProgram, name)\n    }\n\n    getUniformLocation(name) {\n        return gl.getUniformLocation(this._shaderProgram, name)\n    }\n\n    setUniform(unifromType, name, value) {\n        const location = gl.getUniformLocation(this._shaderProgram, name)\n        switch(unifromType) {\n            case UNIFORM_TYPES.FLOAT_1F: {\n                gl.uniform1f(location, value[0])\n                return\n            }\n            case UNIFORM_TYPES.FLOAT_2F: {\n                gl.uniform2f(location, value[0], value[1])\n                return\n            }\n            case UNIFORM_TYPES.FLOAT_3F: {\n                gl.uniform3f(location, value[0], value[1], value[2])\n                return \n            }\n            case UNIFORM_TYPES.MAT_4F: {\n                gl.uniformMatrix4fv(location, false, value)\n                return\n            }\n        }\n    }\n\n    setInt1(name, value) {\n        const location = gl.getUniformLocation(this._shaderProgram, name)\n        gl.uniform1i(location, value)\n    }\n\n    setFloat1(name, v0) {\n        const location = gl.getUniformLocation(this._shaderProgram, name)\n        gl.uniform1f(location, v0)\n    }\n\n    setFloat2(name, v0, v1) {\n        const location = gl.getUniformLocation(this._shaderProgram, name)\n        gl.uniform2f(location, v0, v1)\n    }\n\n    setFloat3(name, v0, v1, v2) {\n        const location = gl.getUniformLocation(this._shaderProgram, name)\n        gl.uniform3f(location, v0, v1, v2)\n    }\n\n    setMat4(name, value) {\n        const location = gl.getUniformLocation(this._shaderProgram, name)\n        gl.uniformMatrix4fv(location, false, value)\n    }\n\n    // setTexture(name, value) {\n    //     const location = gl.getUniformLocatio(this._shaderProgram, name)\n    //     // gl.uniform\n    // }\n\n\n \n\n    createVertexArray(vertexBuffers) {\n        const vertexArray = new VertexArray()\n        vertexBuffers.forEach(vertexBuffer => {\n            const locations = new  Array(vertexBuffer.layout.length)\n            for (let i = 0; i < locations.length; i++) {\n                locatoins[i] = gl.getAttribLocation(veretxBuffer.layout[i].name)\n            }\n            vertexArray.addVertexBuffer(locations, vertexBuffer) \n        })\n        return vertexArray\n    }\n\n    addUniform(type, name, buffer) {\n        const location = gl.getUniformLocation(this._shaderProgram, name)\n        if (location == -1) {\n            console.log(name, \" uniform not found\")\n            return\n        }\n\n        this._uniforms.push({\n            location: location,\n            type: type,\n            buffer: buffer\n        })\n    }\n\n    getUniformLocation(name) {\n        const location = gl.getUniformLocation(this._shaderProgram, name)\n        if (location == -1) {\n            console.log(name, \" uniform not found\")\n        }\n\n        return location\n    }\n\n    bind() {\n        if (!this._shaderProgram) {\n            console.error(\"The shader program is undefined\")\n            return\n        }\n\n        gl.useProgram(this._shaderProgram)\n    }\n\n    unbind() {\n        \n    }\n\n    _compileShader(type, source) { \n        const shader = gl.createShader(type); \n        gl.shaderSource(shader, source); \n        gl.compileShader(shader); \n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) { \n            alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader)); \n            gl.deleteShader(shader);\n            return null; \n        } \n        return shader;\n    }\n    \n    _linkShaders(vertexShader, fragmentShader) {\n        const shaderProgram = gl.createProgram();\n        gl.attachShader(shaderProgram, vertexShader); \n        gl.attachShader(shaderProgram, fragmentShader); \n        gl.linkProgram(shaderProgram); \n        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) { \n            alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram)); \n            return null; \n        } \n        return shaderProgram\n    }\n}\n\n\n\n/*\n\n\nconst shader = new Shader()\n\nconst vertexArray = shader.createVertexArray({\n    \"a_Position\": positionBuffer,\n    \"a_Color\", colorBuffer,\n})\n\n\nconst vertexArray\nvertexArray.addVertexBuffer(shader.getLocation(), vertexBuffer)\nshader.setVertexArray(vertexArray)\nshader.bind()\n\n\nshader.setVertexArray(vertexArray)\nshader.setIndexArray(indexArray)\n// shader.setUniformArray(uniformArray)\n\nshader.bind()\nshader.unfind()\n\n\n\nshader.setVertexArray()\n\n*/"],"names":[],"version":3,"file":"index.944cb514.js.map","sourceRoot":"/__parcel_source_root/"}